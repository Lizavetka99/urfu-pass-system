@using UrfuPassSystem.Domain.Enums
@using UrfuPassSystem.Domain.Models.Statistic
@using UrfuPassSystem.Domain.Services
@using UrfuPassSystem.Domain.Services.StatisticMaker

@page "/statistics"
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IStatisticMaker StatisticMaker
@inject ApplicationDbContext Database
@inject ILogger<Statistics> Logger

<PageTitle>Статистика</PageTitle>

<h1>Статистика</h1>

<div class="col-sm-4">
    <label>От:</label>
    <input type="date" class="form-control" @bind="MinUploadTime" @onkeydown="FilterKeyDown" />
    <label class="mt-2">До:</label>
    <input type="date" class="form-control" @bind="MaxUploadTime" @onkeydown="FilterKeyDown" />
    <div class="btn btn-primary form-control" @onclick="LoadStatistics">Загрузить</div>
</div>

@if (_loading)
{
    <p><em>Загрузка...</em></p>
}
else if (_loaded)
{
    <div>
        <div>Всего фото: @_totalImageStatistic!.Total</div>
        <div>Одобренных: @_totalImageStatistic!.Success</div>
        <div>Отклоненных: @(_totalImageStatistic!.Total - _totalImageStatistic!.Success)</div>
    </div>
    <div>
        <h4>Причины:</h4>
        @foreach (var badImageStatistic in _totalBadImageStatistic!.Statistics)
        {
            <div>
                @CheckTitle(@badImageStatistic.ResultCode) - @badImageStatistic.Count
            </div>
        }
    </div>
}

@code {
    private bool _loading;
    private bool _loaded;

    private TotalImageStatistic? _totalImageStatistic;
    private TotalBadImageStatistic? _totalBadImageStatistic;

    public DateTime? MinUploadTime { get; set; }
    public DateTime? MaxUploadTime { get; set; }

    private async Task FilterKeyDown(KeyboardEventArgs e)
    {
        if (e.Key != "Enter")
            return;
        await LoadStatistics();
    }

    private async Task LoadStatistics()
    {
        if (_loading)
            return;
        _loaded = false;
        _loading = true;

        _totalImageStatistic = await StatisticMaker.MakeImageStatistic(Database, MinUploadTime, MaxUploadTime);
        _totalBadImageStatistic = await StatisticMaker.MakeBadImageStatistic(Database, MinUploadTime, MaxUploadTime);

        _loading = false;
        _loaded = true;
    }

    private string CheckTitle(ImageCheckResultCode code) => code switch
    {
        ImageCheckResultCode.UnexpectedError => "Неожиданная ошибка",
        ImageCheckResultCode.Success => "Одобрено",
        ImageCheckResultCode.BadQuality => "Плохое качество",
        ImageCheckResultCode.NoFace => "Лицо не найдено",
        ImageCheckResultCode.MoreThanOneFace => "Найдено несколько лиц",
        ImageCheckResultCode.BadCrop => "Плохо обрезано",
        ImageCheckResultCode.BadBackground => "Неподходящий фон",
        ImageCheckResultCode.ForeignObjects => "Посторонние объекты",
        ImageCheckResultCode.BadAppearance => "Неподходящий внешний вид",
        ImageCheckResultCode.BadFace => "Неправильное положение лица на фото",
        ImageCheckResultCode.UnexpectedReason => "Другая причина",
        _ => "Неизвестная причина"
    };
}
