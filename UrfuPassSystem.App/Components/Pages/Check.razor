@using UrfuPassSystem.Domain.Entities
@using UrfuPassSystem.Domain.Enums
@using UrfuPassSystem.Domain.Services
@using Microsoft.EntityFrameworkCore
@using UrfuPassSystem.Infrastructure.ImageStorage

@page "/check"
@rendermode InteractiveServer
@inject IImageStorage ImageStorage
@inject NavigationManager NavigationManager
@inject ApplicationDbContext Database

<PageTitle>Проверка фотографий</PageTitle>

@if (image == null)
{
    <p><em>Все фотографии проверены.</em></p>
}
else
{
    <div class="image-name">Название фотографии: @image.OriginalFileName</div>
    <div class="container">
        <div class="row align-items-center">
            <!-- Фотографии с кнопками -->
            <div class="col d-flex justify-content-around">
                <!-- Обработанное фото с кнопкой -->
                <!-- Обработанное фото с кнопкой -->
                <div class="photo-container">
                    <p>Обработанное фото</p>
                    <a class="btn-download" href="@PreviewProcessed" download>
                        <i class="bi bi-download"></i>
                    </a>
                    <img src="@PreviewProcessed"  alt="Фото не прошло автоматическую проверку. Причина: @CheckTitle(image.Checks?.LastOrDefault()?.ResultCode)"/>
                    @if (PreviewProcessed != null)
                        {<button type="button" class="btn-success" @onclick="Success">Подтвердить</button>}
                </div>
                    
                <!-- Изначальное фото с кнопкой -->
                <div class="photo-container">
                    <p>Изначальное фото</p>
                    <a class="btn-download" href="@PreviewRaw" download>
                        <i class="bi bi-download"></i>
                    </a>
                    <img src="@PreviewRaw" alt=""/>
                    <button type="button" class="btn-danger" @onclick="() => showAdditionalButtons = !showAdditionalButtons">Фото не подходит</button>

                    @if (showAdditionalButtons)
                    {
                        <div class="additional-buttons">
                            <p>Заменить на:</p>
                            <InputFile OnChange="FileUploaded"/>
                            @if (fileUploaded)
                                {<button type="button" class="btn btn-secondary" @onclick="SaveImage">Обработать</button>}
                            <p>Или</p>
                            <button type="button" class="btn btn-secondary" @onclick="() => showReasons = !showReasons">Выбрать причину</button>
                            @if (showReasons)
                            {
                                <div class="reasons-buttons">
                                    <button type="button" class="btn btn-secondary" @onclick="(e) => NotSuccess(e, (ImageCheckResultCode)1)">@CheckTitle((ImageCheckResultCode)1)</button>
                                    <button type="button" class="btn btn-secondary" @onclick="(e) => NotSuccess(e, (ImageCheckResultCode)2)">@CheckTitle((ImageCheckResultCode)2)</button>
                                    <button type="button" class="btn btn-secondary" @onclick="(e) => NotSuccess(e, (ImageCheckResultCode)3)">@CheckTitle((ImageCheckResultCode)3)</button>
                                    <button type="button" class="btn btn-secondary" @onclick="(e) => NotSuccess(e, (ImageCheckResultCode)4)">@CheckTitle((ImageCheckResultCode)4)</button>
                                    <button type="button" class="btn btn-secondary" @onclick="(e) => NotSuccess(e, (ImageCheckResultCode)5)">@CheckTitle((ImageCheckResultCode)5)</button>
                                    <button type="button" class="btn btn-secondary" @onclick="(e) => NotSuccess(e, (ImageCheckResultCode)6)">@CheckTitle((ImageCheckResultCode)6)</button>
                                    <button type="button" class="btn btn-secondary" @onclick="(e) => NotSuccess(e, (ImageCheckResultCode)7)">@CheckTitle((ImageCheckResultCode)7)</button>
                                    <button type="button" class="btn btn-secondary" @onclick="(e) => NotSuccess(e, (ImageCheckResultCode)8)">@CheckTitle((ImageCheckResultCode)8)</button>
                                    <button type="button" class="btn btn-secondary" @onclick="(e) => NotSuccess(e, (ImageCheckResultCode)100)">@CheckTitle((ImageCheckResultCode)100)</button>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="container">
            <button class="btn" @onclick="NavigateToList">Вернуться к списку фото</button>
        </div>
    </div>
}

@code {
    private Image? image;
    private string? PreviewRaw { get; set; }
    private string? PreviewProcessed { get; set; }
    private bool showAdditionalButtons;
    private bool showReasons;
    private IBrowserFile? changedFile { get; set; }
    private bool fileUploaded { get; set; }

    private async Task SaveImage()
    {
        var newImage = ImageStorage.CreateImageFile("jpg");
        await using var destinationStream = new FileStream(newImage, FileMode.Create);
        await changedFile!.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(destinationStream);
        PreviewProcessed = newImage;
        StateHasChanged();
        
    }
    
    public Task FileUploaded(InputFileChangeEventArgs e)
    {
        changedFile = e.File;
        fileUploaded = true;
        return Task.CompletedTask;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await Update();
    }

    private async Task Success(MouseEventArgs e)
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        var check = await CreateCheck(image!, ImageCheckResultCode.Success);
        await Update();
    }

    private async Task NotSuccess(MouseEventArgs e, ImageCheckResultCode reason)
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        var check = await CreateCheck(image!, reason);
        await Update();
    }

    private async Task<ImageCheck> CreateCheck(Image image, ImageCheckResultCode result)
    {
        var check = new ImageCheck
        {
            Image = image,
            CheckTime = DateTime.UtcNow,
            IsAuto = false,
            IsEdited = false,
            FilePath = image.FilePath,
            ResultCode = result
        };
        await Database.ImageChecks.AddAsync(check);
        await Database.SaveChangesAsync();
        return check;
    }

    private async Task Update()
    {
        image = await Database.Images
            .Include(i => i.Checks!.OrderBy(c => c.CheckTime))
            .Where(i => !i.Checks!.Any(c => !c.IsDeleted && !c.IsAuto))
            .FirstOrDefaultAsync();
        if (image == null)
            return;

        PreviewRaw = image.FilePath;
        var autoCheck = image.Checks!.LastOrDefault(c => !c.IsDeleted && c.IsAuto);
        PreviewProcessed = autoCheck is not null && autoCheck.IsSuccess && File.Exists(autoCheck.FilePath) ? autoCheck.FilePath : null;
        showAdditionalButtons = false;
        showReasons = false;
        fileUploaded = false;
    }

    private void NavigateToList()
    {
        NavigationManager.NavigateTo("list");
    }

    private string CheckTitle(ImageCheckResultCode? code) => code switch
    {
        ImageCheckResultCode.UnexpectedError => "Неожиданная ошибка",
        ImageCheckResultCode.Success => "Одобрено",
        ImageCheckResultCode.BadQuality => "Плохое качество",
        ImageCheckResultCode.NoFace => "Лицо не найдено",
        ImageCheckResultCode.MoreThanOneFace => "Найдено несколько лиц",
        ImageCheckResultCode.BadCrop => "Плохо обрезано",
        ImageCheckResultCode.BadBackground => "Неподходящий фон",
        ImageCheckResultCode.ForeignObjects => "Посторонние объекты",
        ImageCheckResultCode.BadAppearance => "Неподходящий внешний вид",
        ImageCheckResultCode.BadFace => "Неправильное положение лица на фото",
        ImageCheckResultCode.UnexpectedReason => "Другая причина",
        _ => "Неизвестная причина"
    };
}
