
@using UrfuPassSystem.Domain.Entities
@using UrfuPassSystem.Domain.Enums
@using UrfuPassSystem.Domain.Services
@using Microsoft.EntityFrameworkCore
@inject IImageStorage ImageStorage
@inject IImageHandler ImageHandler
@inject ApplicationDbContext DbContext
@using UrfuPassSystem.Domain.Services.ImageHandler
@using UrfuPassSystem.Infrastructure.ImageStorage

@page "/check"
@rendermode InteractiveServer
@inject ILogger<Check> Logger
@inject ApplicationDbContext Database

<PageTitle>Проверка фотографий</PageTitle>


 
@if (image == null)
{
    <p><em>Все фотографии проверены.</em></p>
}
else
{
    <div class="image-name">Название фотографии: @image.OriginalFileName</div>
    <div class="container">
    <div class="row align-items-center">
        <!-- Фотографии с кнопками -->
        <div class="col d-flex justify-content-around">
            <!-- Обработанное фото с кнопкой -->
            <!-- Обработанное фото с кнопкой -->
            <div class="photo-container">
                <p>Обработанное фото</p>
                <a class="btn-download" href="@PreviewProcessed" download>
                    <i class="bi bi-download"></i>
                </a>
                <img height="300" src="@PreviewProcessed" />
                <button type="button" class="btn-success" @onclick="Success">Подтвердить</button>
            </div>
                
            <!-- Изначальное фото с кнопкой -->
            <div class="photo-container">
                <p>Изначальное фото</p>
                <a class="btn-download" href="@PreviewRaw" download>
                    <i class="bi bi-download"></i>
                </a>
                <img height="300" src="@PreviewRaw" />
                <button type="button" class="btn-danger" @onclick="ShowAdditionalOptions">Фото не подходит</button>

                @if (showAdditionalButtons)
                {
                    <div class="additional-buttons">
                        <InputFile OnChange="FileUploaded" />
                        <button type="button" class="btn btn-primary" @onclick="SaveImage">Обработать</button>
                        <button type="button" class="btn-secondary" @onclick="ChooseReason">Выбрать причину</button>
                    </div>
                }
            </div>
        </div>
    </div>
    </div>
}

@code {
    public Image? image;

    public string? PreviewRaw { get; set; }
    public string? PreviewProcessed { get; set; }
    private bool showAdditionalButtons = false;
    private IBrowserFile changedFile { get; set; }

    private void ShowAdditionalOptions()
    {
        showAdditionalButtons = true;
    }
    
    private async Task SaveImage()
    {
        if (PreviewProcessed is null)
        {
            PreviewProcessed = ImageStorage.CreateImageFile("jpg");
        }
        await using var destinationStream = new FileStream(PreviewProcessed, FileMode.Create);
        await changedFile.OpenReadStream().CopyToAsync(destinationStream);
    }
    
    public async Task FileUploaded(InputFileChangeEventArgs e)
    {
        changedFile = e.File;
    }

    private void ReplacePhoto()
    {
    // Логика для замены фотографии
        Logger.LogInformation("Замена фотографии...");
    }

    private void ChooseReason()
    {
    // Логика для выбора причины
        Logger.LogInformation("Выбор причины...");
    }

    protected override async Task OnInitializedAsync()
    {
        await Update();
    }

    private async Task Success(MouseEventArgs e)
    {
        var check = await CreateCheck(image!, true);
        await Update();
    }

    private async Task NotSuccess(MouseEventArgs e)
    {
        var check = await CreateCheck(image!, false);
        await Update();
    }

    private async Task<ImageCheck> CreateCheck(Image image, bool isSuccess)
    {
        var check = new ImageCheck
        {
            Image = image,
            CheckTime = DateTime.UtcNow,
            IsAuto = false,
            IsEdited = false,
            FilePath = image.FilePath,
            ResultCode = isSuccess ? ImageCheckResultCode.Success : ImageCheckResultCode.UnexpectedError
        };
        await Database.ImageChecks.AddAsync(check);
        await Database.SaveChangesAsync();
        return check;
    }

    private async Task Update()
    {
        image = await Database.Images
            .Include(i => i.Checks)
            .Where(i => !i.Checks!.Any(c => !c.IsAuto && !c.IsDeleted)).FirstOrDefaultAsync();
        if (image == null)
            return;

        PreviewRaw = image.FilePath;

        var autoCheck = image.Checks?.FirstOrDefault(c => c.IsAuto);
        if (autoCheck == null || !File.Exists(autoCheck.FilePath))
            PreviewProcessed = null;
        else
            PreviewProcessed = autoCheck.FilePath;
    }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    private void NavigateToList()
    {
        NavigationManager.NavigateTo("list");
    }

}