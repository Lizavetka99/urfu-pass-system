@using Microsoft.EntityFrameworkCore
@using UrfuPassSystem.App.ArchiveHandler
@using UrfuPassSystem.App.ImageHandler
@using UrfuPassSystem.Domain.Entities
@using UrfuPassSystem.Domain.Enums
@using UrfuPassSystem.Domain.Services

@page "/check"
@rendermode InteractiveServer
@inject ILogger<Check> Logger
@inject ApplicationDbContext Database

<PageTitle>Проверка фотографий</PageTitle>

<h1>Проверка фотографий</h1>
 
@if (image == null)
{
    <p><em>Все фотографии проверены.</em></p>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col">
                <img height="300" src="@PreviewRaw" />
            </div>
            <div class="col">
                <img height="300" src="@PreviewProcessed" />
            </div>
        </div>
        <hr/>
        <div class="row">
            <div class="col">
                <button type="button" class="btn btn-primary" @onclick="Success">Ок</button>
            </div>
            <div class="col">
                <button type="button" class="btn btn-primary" @onclick="NotSuccess">Не ок</button>
            </div>
        </div>
    </div>
}

@code {
    public Image? image;

    public string? PreviewRaw { get; set; }
    public string? PreviewProcessed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Update();
    }

    private async Task Success(MouseEventArgs e)
    {
        var check = await CreateCheck(image!, true);
        await Update();
    }

    private async Task NotSuccess(MouseEventArgs e)
    {
        var check = await CreateCheck(image!, false);
        await Update();
    }

    private async Task<ImageCheck> CreateCheck(Image image, bool isSuccess)
    {
        var check = new ImageCheck
        {
            ImageId = image.Id,
            CheckTime = DateTime.UtcNow,
            IsAuto = false,
            IsEdited = false,
            FilePath = image.FilePath,
            ResultCode = ImageCheckResultCode.Success
        };
        await Database.ImageChecks.AddAsync(check);
        await Database.SaveChangesAsync();
        return check;
    }

    private async Task Update()
    {
        image = await Database.Images
            .Include(i => i.Checks)
            .Where(i => !i.Checks!.Any(c => !c.IsAuto)).FirstOrDefaultAsync();
        if (image == null)
            return;

        if (image.FilePath == null)
            PreviewRaw = null;
        else
        {
            var buffer = await File.ReadAllBytesAsync(image.FilePath);
            PreviewRaw = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
        }

        var autoCheck = image.Checks?.FirstOrDefault(c => c.IsAuto);
        if (autoCheck == null || !File.Exists(autoCheck.FilePath))
            PreviewProcessed = null;
        else
        {
            var buffer = await File.ReadAllBytesAsync(autoCheck.FilePath);
            PreviewProcessed = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
        }
    }
}
